// Build all samples into ./site, preserving relative structure with slugified paths
// and generating a rich homepage that links to every category.
import { globby } from 'globby';
import { execa } from 'execa';
import fs from 'fs-extra';
import path from 'node:path';

const ROOT = process.cwd();
const SRC = path.join(ROOT, 'samples');
const OUT = path.join(ROOT, 'site');
const HOMEPAGE = path.join(ROOT, 'homepage');
const GENERATED_DATA = path.join(HOMEPAGE, 'src', '__generated-samples.ts');

const toPosix = (value) => value.split(path.sep).join('/');

const slugify = (s) =>
  s
    .toLowerCase()
    .replace(/[^a-z0-9/_-]+/g, '')
    .replace(/[\s]+/g, '-')
    .replace(/-+/g, '-')
    .replace(/\/+/g, '/')
    .replace(/^\/+|\/+$/g, '');

const humanize = (value) =>
  value
    .split(/[\s/_-]+/)
    .filter(Boolean)
    .map((chunk) => chunk.charAt(0).toUpperCase() + chunk.slice(1))
    .join(' ');

await fs.emptyDir(OUT);

const indexes = (await globby('samples/**/index.html')).sort();
if (indexes.length === 0) {
  console.warn('No samples found under samples/**/index.html');
  process.exit(0);
}

const entries = [];
for (const indexFile of indexes) {
  const sampleDir = path.dirname(indexFile);
  const rel = toPosix(path.relative(SRC, sampleDir));
  const slugRel = slugify(rel);
  const category = rel.split('/')[0] || 'samples';

  const htmlSource = await fs.readFile(indexFile, 'utf8');
  const titleMatch = htmlSource.match(/<title>(.*?)<\/title>/i);
  const descriptionMatch = htmlSource.match(/<meta\s+name=["']description["']\s+content=["']([^"']*)["']/i);

  const rawTitle = titleMatch ? titleMatch[1].trim() : path.basename(sampleDir);
  const cleanedTitle = rawTitle.replace(/\s+—\s*ThreeRex\.js/i, '').trim();
  const description = descriptionMatch
    ? descriptionMatch[1].trim()
    : `Пример из каталога samples/${rel}`;

  entries.push({
    rel,
    slugRel,
    category,
    title: cleanedTitle || rawTitle,
    rawTitle,
    description,
    sampleDir,
  });
}

const categoriesMap = new Map();
for (const entry of entries) {
  const list = categoriesMap.get(entry.category) ?? [];
  list.push(entry);
  categoriesMap.set(entry.category, list);
}

const categories = Array.from(categoriesMap.entries())
  .map(([id, items]) => ({
    id,
    label: humanize(id),
    items: items
      .slice()
      .sort((a, b) => a.title.localeCompare(b.title, 'ru'))
      .map((item) => ({
        slug: item.slugRel,
        href: `./${item.slugRel}/`,
        rel: item.rel,
        title: item.title,
        fullTitle: item.rawTitle,
        description: item.description,
      })),
  }))
  .sort((a, b) => a.label.localeCompare(b.label, 'ru'));

const generatedModule = `/* eslint-disable */\n// ⚠️ This file is auto-generated by scripts/build-all.mjs.\n// Do not edit manually — run \`npm run build\` to refresh.\n\nexport interface SampleEntry {\n  slug: string;\n  href: string;\n  rel: string;\n  title: string;\n  fullTitle: string;\n  description: string;\n}\n\nexport interface SampleCategory {\n  id: string;\n  label: string;\n  items: SampleEntry[];\n}\n\nexport const categories: SampleCategory[] = ${JSON.stringify(categories, null, 2)};\n`;

await fs.writeFile(GENERATED_DATA, generatedModule, 'utf8');

// Build homepage first so it lands at site/index.html
console.log('Building homepage -> site');
await execa(
  'npx',
  [
    'vite',
    'build',
    '--config',
    path.join(ROOT, 'vite.config.ts'),
    '--base',
    './',
    '--outDir',
    OUT,
  ],
  {
    stdio: 'inherit',
    cwd: HOMEPAGE,
  }
);

// Build samples
for (const entry of entries) {
  const sampleDir = path.join(SRC, entry.rel);
  const destDir = path.join(OUT, entry.slugRel);

  await fs.ensureDir(destDir);

  console.log(`Building: ${entry.rel} -> ${path.relative(ROOT, destDir)}`);
  await execa(
    'npx',
    [
      'vite',
      'build',
      '--config',
      path.join(ROOT, 'vite.config.ts'),
      '--base',
      './',
      '--outDir',
      destDir,
    ],
    {
      stdio: 'inherit',
      cwd: sampleDir,
    }
  );
}

console.log('Site assembled at ./site');
