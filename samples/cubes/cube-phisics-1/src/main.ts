import * as THREE from 'three';
import {
    getDataTextBlock,
    getInfoBlock,
    updateCubePositionText,
    updateCubeRotationText
} from '../../../common/html_utils';
import {createCube, getPerspectiveCamera} from '../../../common/three_utils';
import {OimoPhysics} from '../../../common/physics/OimoPhysics';
import {createTransformPanel} from '../../../common/panel_utils';
import {createGradientPlane, createGrid} from "../../../common/plane_helpers";
import {createPlayerController} from '../../../common/player_utils';
import {Player} from '../../../common/Player';
import {ControlPanel} from '../../../common/ui/ControlPanel';
import {createWalls, createGroundCollider, createGoalSphere, isInsideSphere} from '../../../common/scene_setup';
import {addStaticMeshes, addDynamicMesh, checkDistance} from '../../../common/physics_setup';
import {ConfettiSystem} from '../../../common/effects/Confetti';

// === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
const GROUND_SIZE = 40;
const WALL_HEIGHT = 2;
const PICKUP_DISTANCE = 3;
const CUBE_SIZE = 1; // –†–∞–∑–º–µ—Ä –∫—É–±–∞ –∏–∑ createCube()

// === –°—Ü–µ–Ω–∞ ===
const scene = new THREE.Scene();
const camera = getPerspectiveCamera(3);

const renderer = new THREE.WebGLRenderer({antialias: true});
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// === –ö–∞–º–µ—Ä–∞ ===
const controller = createPlayerController(camera, renderer.domElement, {
    initialPosition: {x: 0, y: 2.5, z: 6},
    initialPitch: -0.35,
});

// === –û–±—ä–µ–∫—Ç—ã —Å—Ü–µ–Ω—ã ===
const cube = createCube();
scene.add(cube);

const ground = createGradientPlane(GROUND_SIZE, GROUND_SIZE);
scene.add(ground);

const grid = createGrid(GROUND_SIZE, GROUND_SIZE, ground.position);
scene.add(grid);

const groundCollider = createGroundCollider(GROUND_SIZE, 2.0, ground.position.y);
scene.add(groundCollider);

const walls = createWalls({
    size: GROUND_SIZE,
    height: WALL_HEIGHT,
    thickness: 2.0,
    color: 0x4488ff,
    opacity: 0.3,
    groundY: ground.position.y
});
walls.forEach(wall => scene.add(wall));

// –°—Ñ–µ—Ä–∞-—Ü–µ–ª—å (—Ä–∞–¥–∏—É—Å = 2 —à–∏—Ä–∏–Ω—ã –∫—É–±–∞)
const goalSphereRadius = CUBE_SIZE * 2;
const goalSphere = createGoalSphere({
    radius: goalSphereRadius,
    position: { x: -10, y: ground.position.y, z: -10 },
    color: 0xffff00,
    opacity: 0.3
});
scene.add(goalSphere);

// === –§–∏–∑–∏–∫–∞ ===
const physics = await OimoPhysics();
addStaticMeshes(physics, [groundCollider, ...walls]);
addDynamicMesh(physics, cube, 1);

// === –ò–≥—Ä–æ–∫ ===
const player = new Player(physics, {
    position: { x: 5, y: 1, z: 5 },
    speed: 5,
    jumpForce: 8
});
scene.add(player.mesh);

// === –≠—Ñ—Ñ–µ–∫—Ç—ã ===
const confetti = new ConfettiSystem(scene);

// === UI ===
const controlPanel = new ControlPanel(player, {
    onCommand: (cmd) => console.log('–ö–æ–º–∞–Ω–¥–∞:', cmd)
});
controlPanel.mount();

const info = getInfoBlock();
const panel = createTransformPanel();
const auto = panel.querySelector('#auto') as HTMLInputElement;
document.body.appendChild(info);

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–Ω–µ–ª–∏ –∫—É–±–∞ ===
function syncUIFromCube() {
    cube.grabPositionTo(panel.positions);
    cube.grabRotationTo(panel.rotations);
    panel.updatePositions(panel.positions);
    panel.updateRotation(panel.rotations);
}

syncUIFromCube();

[panel.positions.x, panel.positions.y, panel.positions.z].forEach((s) => {
    s.addEventListener('input', () => {
        updateCubePositionText(panel, cube.position);
        physics.updateMesh?.(cube);
    });
});

[panel.rotations.x, panel.rotations.y, panel.rotations.z].forEach((s) => {
    s.addEventListener('input', () => {
        updateCubeRotationText(panel, cube.rotation);
        physics.updateMesh?.(cube);
    });
});

// === –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª ===
let prevTime = performance.now();
let gameWon = false;

function updatePlayerStatus() {
    const distToCube = checkDistance(player.mesh, cube);
    const cubePos = cube.position;
    const spherePos = goalSphere.position;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
    if (!gameWon && isInsideSphere(cube, goalSphere, goalSphereRadius)) {
        gameWon = true;
        controlPanel.setOutput('üéâ –í–´ –ü–û–ë–ï–î–ò–õ–ò! üéâ');

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ñ–µ—Ä—ã
        confetti.burst(goalSphere.position.clone(), 150);
        return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
    let output = '';

    // –ü–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
    output += `–ö—É–±: x=${cubePos.x.toFixed(1)}, y=${cubePos.y.toFixed(1)}, z=${cubePos.z.toFixed(1)}\n`;
    output += `–°—Ñ–µ—Ä–∞: x=${spherePos.x.toFixed(1)}, y=${spherePos.y.toFixed(1)}, z=${spherePos.z.toFixed(1)}\n`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–∑—è—Ç—å/–æ—Ç–ø—É—Å—Ç–∏—Ç—å
    controlPanel.updatePickupButton(player.isCarrying);

    // –°—Ç–∞—Ç—É—Å —Ä–æ–±–æ—Ç–∞
    if (player.isCarrying) {
        // –ï—Å–ª–∏ –¥–µ—Ä–∂–∏–º –∫—É–±
        output += `–í—ã –¥–µ—Ä–∂–∏—Ç–µ –∫—É–± (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è: ${distToCube.toFixed(2)}). –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—É—Å—Ç–∏—Ç—å"`;
    } else if (distToCube < PICKUP_DISTANCE) {
        // –ï—Å–ª–∏ —Ä—è–¥–æ–º —Å –∫—É–±–æ–º
        player.setNearbyPickupTarget(cube);
        output += `–†—è–¥–æ–º —Å –∫—É–±–æ–º (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è: ${distToCube.toFixed(2)}). –ù–∞–∂–º–∏—Ç–µ "–í–∑—è—Ç—å"`;
    } else {
        // –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä–æ–±–æ—Ç–∞
        player.setNearbyPickupTarget(null);
        const pos = player.getPosition();
        output += `–†–æ–±–æ—Ç: x=${pos.x.toFixed(1)}, y=${pos.y.toFixed(1)}, z=${pos.z.toFixed(1)}`;
    }

    controlPanel.setOutput(output);
}

function animate() {
    requestAnimationFrame(animate);

    const now = performance.now();
    const dt = (now - prevTime) / 1000;
    prevTime = now;

    controller.update(dt);
    player.update(dt);
    updatePlayerStatus();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
    confetti.update(dt);

    if (auto.checked) {
        physics.step?.(dt);
    }

    info.innerHTML = getDataTextBlock(cube.position, cube.rotation);
    syncUIFromCube();

    renderer.render(scene, camera);
}

animate();

// === –û—á–∏—Å—Ç–∫–∞ ===
window.addEventListener('beforeunload', () => {
    controller.dispose();
    player.dispose();
    controlPanel.dispose();
    confetti.clear();
});

window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});
