import * as THREE from 'three';
import {
    getDataTextBlock,
    getInfoBlock,
    updateCubePositionText,
    updateCubeRotationText
} from '../../../common/html_utils';
import {createCube, getPerspectiveCamera} from '../../../common/three_utils';
import {OimoPhysics} from '../../../common/physics/OimoPhysics';
import {createTransformPanel} from '../../../common/panel_utils';
import {createGradientPlane, createGrid} from "../../../common/plane_helpers";
import {createPlayerController} from '../../../common/player_utils';
import {Player} from '../../../common/Player';

// === –°—Ü–µ–Ω–∞ ===
const scene = new THREE.Scene();
const camera = getPerspectiveCamera(3);

const renderer = new THREE.WebGLRenderer({antialias: true});
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π: –≤—ã–Ω–æ—Å –≤ player_utils ---
const controller = createPlayerController(camera, renderer.domElement, {
    initialPosition: {x: 0, y: 2.5, z: 6},
    initialPitch: -0.35,
});
let prevTime = performance.now();

const cube = createCube();
scene.add(cube);

const ground = createGradientPlane(40, 40);
scene.add(ground);

const grid = createGrid(40, 40, ground.position)
scene.add(grid);

// –î–æ–±–∞–≤–∏–º –Ω–µ–≤–∏–¥–∏–º—ã–π box-–∫–æ–ª–ª–∞–π–¥–µ—Ä –¥–ª—è ground (—Ç–æ–ª—â–∏–Ω–∞ 2.0, –≤–µ—Ä—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏)
const groundCollider = new THREE.Mesh(
    new THREE.BoxGeometry(40, 2.0, 40),
    new THREE.MeshBasicMaterial({visible: false})
);
// –¶–µ–Ω—Ç—Ä –Ω–∞ 1.0 –Ω–∏–∂–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –≤–µ—Ä—Ö —Å–æ–≤–ø–∞–¥–∞–ª —Å –ø–ª–æ—Å–∫–æ—Å—Ç—å—é ground
groundCollider.position.set(0, ground.position.y - 1.0, 0);
scene.add(groundCollider);

// –î–æ–±–∞–≤–∏–º —Å—Ç–µ–Ω–∫–∏ –ø–æ –∫—Ä–∞—è–º (–ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ)
const wallMaterial = new THREE.MeshBasicMaterial({
    color: 0x4488ff,
    transparent: true,
    opacity: 0.3
});
const wallHeight = 2;
const wallThickness = 0.5;
const groundSize = 40;

// –°–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–µ–Ω–∫–∞
const wallNorth = new THREE.Mesh(new THREE.BoxGeometry(groundSize, wallHeight, wallThickness), wallMaterial);
wallNorth.position.set(0, wallHeight / 2, -groundSize / 2);
scene.add(wallNorth);

// –Æ–∂–Ω–∞—è —Å—Ç–µ–Ω–∫–∞
const wallSouth = new THREE.Mesh(new THREE.BoxGeometry(groundSize, wallHeight, wallThickness), wallMaterial);
wallSouth.position.set(0, wallHeight / 2, groundSize / 2);
scene.add(wallSouth);

// –ó–∞–ø–∞–¥–Ω–∞—è —Å—Ç–µ–Ω–∫–∞
const wallWest = new THREE.Mesh(new THREE.BoxGeometry(wallThickness, wallHeight, groundSize), wallMaterial);
wallWest.position.set(-groundSize / 2, wallHeight / 2, 0);
scene.add(wallWest);

// –í–æ—Å—Ç–æ—á–Ω–∞—è —Å—Ç–µ–Ω–∫–∞
const wallEast = new THREE.Mesh(new THREE.BoxGeometry(wallThickness, wallHeight, groundSize), wallMaterial);
wallEast.position.set(groundSize / 2, wallHeight / 2, 0);
scene.add(wallEast);

// === –§–∏–∑–∏–∫–∞ (Oimo.js helper) ===
const physics = await OimoPhysics();
// ground ‚Äî —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π (mass = 0)
physics.addMesh(groundCollider, 0);
// —Å—Ç–µ–Ω–∫–∏ ‚Äî —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ
physics.addMesh(wallNorth, 0);
physics.addMesh(wallSouth, 0);
physics.addMesh(wallWest, 0);
physics.addMesh(wallEast, 0);
// cube ‚Äî –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π (mass = 1)
physics.addMesh(cube, 1);

// === –ò–≥—Ä–æ–∫ ===
const player = new Player(physics, {
    position: { x: 5, y: 1, z: 5 },
    speed: 5,
    jumpForce: 8
});
scene.add(player.mesh);

// === –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º ===
const controlPanel = document.createElement('div');
controlPanel.style.cssText = `
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: rgba(0, 0, 0, 0.8);
    padding: 20px;
    display: flex;
    gap: 20px;
    align-items: center;
    color: white;
    font-family: monospace;
    z-index: 1000;
    resize: vertical;
    overflow: auto;
    min-height: 100px;
    max-height: 50vh;
`;

// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
const inputContainer = document.createElement('div');
inputContainer.style.cssText = `
    display: flex;
    gap: 5px;
    flex: 1;
`;

// –ü–æ–ª–µ –≤–≤–æ–¥–∞
const inputField = document.createElement('input');
inputField.type = 'text';
inputField.placeholder = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É...';
inputField.style.cssText = `
    padding: 10px;
    font-size: 14px;
    font-family: monospace;
    flex: 1;
    border: none;
    border-radius: 4px;
`;

// –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
const btnSend = document.createElement('button');
btnSend.textContent = 'üì§';
btnSend.style.cssText = `
    width: 40px;
    height: 40px;
    font-size: 18px;
    cursor: pointer;
    background: #4488ff;
    color: white;
    border: none;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
`;
btnSend.addEventListener('click', () => {
    const command = inputField.value.trim();
    if (command) {
        outputText.textContent = `–ö–æ–º–∞–Ω–¥–∞: ${command}`;
        inputField.value = '';
    }
});

inputContainer.appendChild(inputField);
inputContainer.appendChild(btnSend);

// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
const buttonsContainer = document.createElement('div');
buttonsContainer.style.cssText = `
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
`;

// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
const createButton = (text: string, onClick: () => void) => {
    const btn = document.createElement('button');
    btn.textContent = text;
    btn.style.cssText = `
        padding: 10px 15px;
        font-size: 14px;
        font-family: monospace;
        cursor: pointer;
        background: #4488ff;
        color: white;
        border: none;
        border-radius: 4px;
    `;
    btn.addEventListener('mousedown', onClick);
    return btn;
};

const btnLeft = createButton('‚Üê –í–ª–µ–≤–æ', () => player.moveLeft(0.1));
const btnRight = createButton('–í–ø—Ä–∞–≤–æ ‚Üí', () => player.moveRight(0.1));
const btnForward = createButton('‚Üë –í–ø–µ—Ä–µ–¥', () => player.moveForward(0.1));
const btnBackward = createButton('‚Üì –ù–∞–∑–∞–¥', () => player.moveBackward(0.1));
const btnJump = createButton('–ü—Ä—ã–≥–Ω—É—Ç—å', () => player.jump());
const btnPickup = createButton('–í–∑—è—Ç—å', () => player.togglePickup());

buttonsContainer.appendChild(btnLeft);
buttonsContainer.appendChild(btnRight);
buttonsContainer.appendChild(btnForward);
buttonsContainer.appendChild(btnBackward);
buttonsContainer.appendChild(btnJump);
buttonsContainer.appendChild(btnPickup);

// –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
const outputText = document.createElement('div');
outputText.style.cssText = `
    flex: 1;
    padding: 10px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
    font-size: 14px;
    min-height: 40px;
    overflow-y: auto;
`;
outputText.textContent = '–ì–æ—Ç–æ–≤ –∫ –∫–æ–º–∞–Ω–¥–∞–º...';

controlPanel.appendChild(inputContainer);
controlPanel.appendChild(buttonsContainer);
controlPanel.appendChild(outputText);
document.body.appendChild(controlPanel);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã
inputField.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
        btnSend.click();
    }
});


// === Overlay –¥–ª—è —Ç–µ–∫—Å—Ç–∞ ===
const info = getInfoBlock()
const panel = createTransformPanel();
const auto = panel.querySelector('#auto') as HTMLInputElement;

document.body.appendChild(info);

// === –ê–Ω–∏–º–∞—Ü–∏—è ===
function animate() {
    requestAnimationFrame(animate);

    const now = performance.now();
    const dt = (now - prevTime) / 1000;
    prevTime = now;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞–º–µ—Ä—ã
    controller.update(dt);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    player.update(dt);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ –∫—É–±—É –¥–ª—è –ø–æ–¥–±–æ—Ä–∞
    const distToCube = player.getPosition().distanceTo(cube.position);
    if (distToCube < 3) {
        player.setNearbyPickupTarget(cube);
        outputText.textContent = `–†—è–¥–æ–º —Å –∫—É–±–æ–º (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è: ${distToCube.toFixed(2)}). –ù–∞–∂–º–∏—Ç–µ "–í–∑—è—Ç—å"`;
    } else {
        player.setNearbyPickupTarget(null);
        if (player.isCarrying) {
            outputText.textContent = '–ù–µ—Å—É –∫—É–±...';
        } else {
            outputText.textContent = `–ü–æ–∑–∏—Ü–∏—è —Ä–æ–±–æ—Ç–∞: x=${player.getPosition().x.toFixed(1)}, y=${player.getPosition().y.toFixed(1)}, z=${player.getPosition().z.toFixed(1)}`;
        }
    }

    // –®–∞–≥ —Ñ–∏–∑–∏–∫–∏ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω auto
    if (auto.checked && physics) {
        physics.step?.(dt);
    }

    // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    info.innerHTML = getDataTextBlock(cube.position, cube.rotation);
    syncUIFromCube();

    renderer.render(scene, camera);
}

animate();

// –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    controller.dispose();
    player.dispose();
});

// === Resize ===
window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –∫—É–±–∞
function syncUIFromCube() {
    cube.grabPositionTo(panel.positions);
    cube.grabRotationTo(panel.rotations);
    panel.updatePositions(panel.positions);
    panel.updateRotation(panel.rotations);
}

syncUIFromCube();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: UI -> –∫—É–±
[panel.positions.x, panel.positions.y, panel.positions.z].forEach((s) => {
    s.addEventListener('input', () => {
        updateCubePositionText(panel, cube.position);
        physics.updateMesh?.(cube);
    });
});


[panel.rotations.x, panel.rotations.y, panel.rotations.z].forEach((s) => {
    s.addEventListener('input', () => {
        updateCubeRotationText(panel, cube.rotation);
        physics.updateMesh?.(cube);
    });
});//d